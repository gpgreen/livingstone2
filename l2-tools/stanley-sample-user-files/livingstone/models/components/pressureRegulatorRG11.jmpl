// this code is automatically generated by Stanley VJMPL
// DO NOT EDIT

class pressureRegulatorRG11 {

// --- inputs --- 
pressurizationLine pressurizationLineIn;
// --- outputs --- 
pressurizationLine pressurizationLineOut;
// --- attributes --- 
// --- mode names --- 
private enum ModeType {nominal, unknownFault, regulatingHigh, regulatingLow};
private ModeType mode;
stateVector [mode];

// --- constructor --- 
{
// --- background model --- 
pressurizationLineOut.temperature = pressurizationLineIn.temperature;
pressurizationLineOut.contents = pressurizationLineIn.contents;
// --- attribute facts --- 


// --- mode models --- 
switch (mode) {

case nominal: 
pressurizationLineOut.pressure.rg11.upperBound = belowThreshold;
pressurizationLineOut.pressure.rg11.lowerBound = pressurizationLineIn.pressure.rg11.lowerBound;
pressurizationLineOut.pressure.rg01.upperBound = belowThreshold;
pressurizationLineOut.pressure.rg01.lowerBound = belowThreshold;

case unknownFault: 
;

case regulatingHigh: 
pressurizationLineOut.pressure.rg11 = pressurizationLineIn.pressure.rg11;
// no constraints possible w.r.t. rg01 bounds. unless we say how 'high';

case regulatingLow: 
pressurizationLineOut.pressure.rg11.upperBound = belowThreshold;
pressurizationLineOut.pressure.rg11.lowerBound = belowThreshold;
pressurizationLineOut.pressure.rg01.upperBound = belowThreshold;
pressurizationLineOut.pressure.rg01.lowerBound = belowThreshold;

}

}

// --- transitions --- 


// --- probabilities --- 
// probability `unknownFaultRank' => 1.0e-10
failure toUnknownFault(*, unknownFault, 1.0e-10) {
}
// probability `likely' => 0.05
failure toRegulatingHigh(*, regulatingHigh, 0.05) {
}
// probability `likely' => 0.05
failure toRegulatingLow(*, regulatingLow, 0.05) {
}

}


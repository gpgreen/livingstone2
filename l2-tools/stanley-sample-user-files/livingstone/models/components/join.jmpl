// this code is automatically generated by Stanley VJMPL
// DO NOT EDIT

class join {

// --- inputs --- 
pipe pipeIn1;
pipe pipeIn2;
// --- outputs --- 
pipe pipeOut;
// --- attributes --- 
flowValues flippedFlow;
// --- mode names --- 
private enum ModeType {ok, unknownFault};
private ModeType mode;
stateVector [mode];

// --- parameters --- 
contextValue context;

relation join_setParams (contextValue paramVal1_1) {
context = paramVal1_1;
}

// --- constructor --- 
{
// --- background model --- 
// --- attribute facts --- 


// --- mode models --- 
switch (mode) {

/// pressure equalization and conservation of flow
/// Must handle input or output flow from any possible pipe.
/// The sign of the 2nd input-flow is negated so that it can be considered an output. This is because conservation of flow works with a branch configuration (1-input and 2-outputs).
case ok: 
pipeIn2.flow.negateFlow(flippedFlow);
pipeIn1.flow.conservationOfFlow(flippedFlow, pipeOut.flow);
pipeIn1.pressure.equal(pipeOut.pressure);
pipeIn2.pressure.equal(pipeOut.pressure);

case unknownFault: 
;

}

}

// --- transitions --- 


// --- probabilities --- 
// probability `unknownFaultRank' => 1.0e-10
failure toUnknownFault(*, unknownFault, 1.0e-10) {
}

}


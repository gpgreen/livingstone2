// this code is automatically generated by Stanley VJMPL
// DO NOT EDIT

class branch {

// --- inputs --- 
pipe pipeIn;
// --- outputs --- 
pipe pipeOut1;
pipe pipeOut2;
// --- attributes --- 
// --- mode names --- 
private enum ModeType {ok, unknownFault};
private ModeType mode;
stateVector [mode];

// --- parameters --- 
contextValue context;

relation branch_setParams (contextValue paramVal1_1) {
context = paramVal1_1;
}

// --- constructor --- 
{
// --- background model --- 
// --- attribute facts --- 


// --- mode models --- 
switch (mode) {

/// pressure equalization and conservation of flow.
/// Must handle input or output flow from any possible pipe.
case ok: 
pipeIn.flow.conservationOfFlow(pipeOut1.flow, pipeOut2.flow);
pipeIn.pressure.equal(pipeOut1.pressure);
pipeIn.pressure.equal(pipeOut2.pressure);

case unknownFault: 
;

}

}

// --- transitions --- 


// --- probabilities --- 
// probability `unknownFaultRank' => 1.0e-10
failure toUnknownFault(*, unknownFault, 1.0e-10) {
}

}


// this code is automatically generated by Stanley VJMPL
// DO NOT EDIT

class reliefValve {

// --- inputs --- 
pipe pipeIn;
// --- outputs --- 
pipe pipeOut;
// --- attributes --- 
openClosedValues rvMode;
// --- mode names --- 
private enum ModeType {unknownFault, nominal, leaking};
private ModeType mode;
stateVector [mode];

// --- parameters --- 
contextValue context;
pressureValues crackPressure;

relation reliefValve_setParams (contextValue paramVal1_1, signValues paramVal2_1, relativeValues paramVal2_2) {
context = paramVal1_1;
crackPressure.sign = paramVal2_1;
crackPressure.rel = paramVal2_2;
}

// --- constructor --- 
{
// --- background model --- 
// --- attribute facts --- 


// --- mode models --- 
switch (mode) {

case unknownFault: 
;

/// Because the transitions are not commanded but are the effects of physical parameters, mode is treated as an attribute here.
/// 
/// crack pressure for opening the valve
/// eg. Operating pressures up to 13,000 PSIG and
/// cracking pressures as low as 1 PSID
case nominal: 
if (pipeIn.pressure.moreThan(crackPressure))
  rvMode = open;
else
  rvMode = closed;
if (rvMode = closed) {
  pipeIn.flow.sign = zero;
  pipeOut.flow.sign = zero;
  // pipeIn.pressure = x;
  // pipeOut.pressure = x;
}
if (rvMode = open) {
  pipeIn.flow.rel = nominal; // (context).flow;
  pipeOut.flow.rel = nominal; //(context).flow;
  pipeIn.equal(pipeOut);    
  // pipeIn.pressure = x;
  // pipeOut.pressure = x;
};

case leaking: 
! pipeIn.pressure.moreThan(crackPressure);
pipeIn.flow.sign = positive;

}

}

// --- transitions --- 


// --- probabilities --- 
// probability `unknownFaultRank' => 1.0e-10
failure toUnknownFault(*, unknownFault, 1.0e-10) {
}
// probability `unlikely' => 0.0025
failure toLeaking(*, leaking, 0.0025) {
}

}


// this code is automatically generated by Stanley VJMPL
// DO NOT EDIT

class orifice {

// --- inputs --- 
pipe pipeIn;
// --- outputs --- 
pipe pipeOut;
// --- attributes --- 
// --- mode names --- 
private enum ModeType {ok, unknownFault, clogged};
private ModeType mode;
stateVector [mode];

// --- parameters --- 
contextValue context;

relation orifice_setParams (contextValue paramVal1_1) {
context = paramVal1_1;
}

// --- constructor --- 
{
// --- background model --- 
// --- attribute facts --- 


// --- mode models --- 
switch (mode) {

/// An orifice controls the volume of flow at some nominal pressure differential.
/// Higher pressure differential implies higher flow.
/// The current version of this rule is a crude hack, and should be replaced with 
/// something more accurate.
case ok: 
pipeIn.equal(pipeOut);

case unknownFault: 
;

/// When the orifice is clogged, there is no flow no matter how large the pressure 
/// differential.
case clogged: 
pipeIn.pressure.equal(pipeOut.pressure);
pipeIn.flow.sign = zero;
pipeOut.flow.sign = zero;

}

}

// --- transitions --- 


// --- probabilities --- 
// probability `unknownFaultRank' => 1.0e-10
failure toUnknownFault(*, unknownFault, 1.0e-10) {
}
// probability `likely' => 0.05
failure toClogged(*, clogged, 0.05) {
}

}


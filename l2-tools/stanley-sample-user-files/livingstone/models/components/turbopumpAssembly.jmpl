// this code is automatically generated by Stanley VJMPL
// DO NOT EDIT

class turbopumpAssembly {

// --- inputs --- 
pipe mainLoxIn;
pipe mainRp1In;
pipe spinStartGheIn;
pipe ggLoxIn;
pipe ggRp1In;
onOffCommand ggPyroCmd;
pipe ipsPurgeGheIn;
// --- outputs --- 
pipe loxOut;
pipe rp1Out;
temperatureValues turbineInletTemp;
pressureValues ggPressure;
// --- attributes --- 
// --- mode names --- 
private enum ModeType {stopped, running, spinStart, unknownFault};
private ModeType mode;
stateVector [mode];

// --- constructor --- 
{
// --- background model --- 
// --- attribute facts --- 


// --- mode models --- 
switch (mode) {

/// Before startup, RP-1 and LO2 just flow through.
case stopped: 
mainRp1In.equal(rp1Out);
mainLoxIn.equal(loxOut);

/// Need to describe increase in outlet pressure.
case running: 
mainLoxIn.flow.equal(loxOut.flow);
mainRp1In.flow.equal(rp1Out.flow);

case spinStart: 
;

/// Generic catch-all mode; add specific failures later.
case unknownFault: 
;

}

}

// --- transitions --- 
transition startTurbine(stopped, spinStart) {
spinStartGheIn.pressure.sign = positive;
spinStartGheIn.pressure.rel = nominal;
spinStartGheIn.flow.sign = positive;
spinStartGheIn.flow.rel = nominal;
}
/// The turbopump stops when the flow of RP-1 andor LO2 into the gas generator 
/// is cut off.
transition shutdown(running, stopped) {
ggLoxIn.flow.sign = zero |
ggRp1In.flow.sign = zero;
}
/// There must be RP-1 and liquid oxygen present when the pyro is fired to start
/// up the turbopump.
transition firePyro(spinStart, running) {
ggPyroCmd = on;
ggLoxIn.flow.sign = positive;
ggLoxIn.flow.rel = nominal;
ggRp1In.flow.sign = positive;
ggRp1In.flow.rel = nominal;
}


// --- probabilities --- 
// probability `unknownFaultRank' => 1.0e-10
failure toUnknownFault(*, unknownFault, 1.0e-10) {
}

}


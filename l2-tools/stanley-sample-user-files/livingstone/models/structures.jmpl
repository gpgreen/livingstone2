// this code is automatically generated by Stanley VJMPL
// DO NOT EDIT

class openClosedIndicator {
openIndicator openIndicator;
closedIndicator closedIndicator;
}
 

class pneumaticsLineTemperature {
thresholdValues tk02;
signValues gradient;
}
 

class range {
thresholdValues upperBound;
thresholdValues lowerBound;

// restrictive constaints on arg types
relation range_init () {
if (upperBound = aboveThreshold)
   lowerBound = aboveThreshold;
if (lowerBound = belowThreshold)
   upperBound = belowThreshold;
}
{
  range_init();
}
}
 

class srValues {
signValues sign;
relativeValues rel;
// abstraction method
/// (and (not (sr-values-equal ?from ?to ))
///        (or (sign-values-less-than (sign ?from ) (sign ?to ))
/// 	   (and (s-equal (sign ?from ) (sign ?to ))
/// 		(relative-values-less-than (rel ?from ) (rel ?to )))
/// 	   ))
relation lessThan ( srValues to ) {
(sign.signValuesLessThan(to.sign)) |
((sign = to.sign) & 
 rel.relativeValuesLessThan(to.rel));
}
// abstraction method
/// (and (not (sr-values-equal ?from ?to ))
///        (or (sign-values-more-than (sign ?from ) (sign ?to ))
/// 	   (and (s-equal (sign ?from ) (sign ?to ))
/// 		(relative-values-more-than (rel ?from ) (rel ?to )))
/// 	   ))
relation moreThan ( srValues to ) {
sign.signValuesMoreThan(to.sign) |
((sign = to.sign) &
 rel.relativeValuesMoreThan(to.rel));
}
// abstraction method
relation moreThanZero (   ) {
sign.signValuesMoreThanZero() &
rel.relativeValuesMoreThanZero();
}
// abstraction method
/// (relative-values-equal from to)
relation toRelative ( relativeValues to ) {
rel = to;
}
}
 

class tankPressure {
thresholdValues pr02Crack;
range pressurizationRate;
range boiloffRate;
range bleedRate;
range ventingRate;

// restrictive constaints on arg types
relation tankPressure_init () {
// the pressurizationRate range is above the boiloffRate range is above
// the bleedRate range is above the ventingRate range.

if (pressurizationRate.lowerBound = aboveThreshold)
   boiloffRate.upperBound = aboveThreshold;
if (boiloffRate.upperBound = belowThreshold)
   pressurizationRate.lowerBound = belowThreshold;

if (boiloffRate.lowerBound = aboveThreshold)
   bleedRate.upperBound = aboveThreshold;
if (bleedRate.upperBound = belowThreshold)
   boiloffRate.lowerBound = belowThreshold;

if (bleedRate.lowerBound = aboveThreshold)
   ventingRate.upperBound = aboveThreshold;
if (ventingRate.upperBound = belowThreshold)
   bleedRate.lowerBound = belowThreshold;
}
{
  tankPressure_init();
}
}
 

class ventLinePressure {
thresholdValues pr02Crack;
range pressurizationRate;
range boiloffRate;
range bleedRate;
range ventingRate;

// restrictive constaints on arg types
relation ventLinePressure_init () {
// the pressurizationRate range is above the boiloffRate range is above
// the bleedRate range is above the ventingRate range.

if (pressurizationRate.lowerBound = aboveThreshold)
   boiloffRate.upperBound = aboveThreshold;
if (boiloffRate.upperBound = belowThreshold)
   pressurizationRate.lowerBound = belowThreshold;

if (boiloffRate.lowerBound = aboveThreshold)
   bleedRate.upperBound = aboveThreshold;
if (bleedRate.upperBound = belowThreshold)
   boiloffRate.lowerBound = belowThreshold;

if (bleedRate.lowerBound = aboveThreshold)
   ventingRate.upperBound = aboveThreshold;
if (ventingRate.upperBound = belowThreshold)
   bleedRate.lowerBound = belowThreshold;
}
{
  ventLinePressure_init();
}
}
 

class ventLineTemperature {
range ambient;
range tankMixture;

// restrictive constaints on arg types
relation ventLineTemperature_init () {
// the ambient temperature range is well above any upperBound
// on the temperature of the tank mixture in the ventLine.
if (tankMixture.upperBound = belowThreshold)
   ambient.lowerBound = belowThreshold;
if (ambient.lowerBound = aboveThreshold)
   tankMixture.upperBound = aboveThreshold;
}
{
  ventLineTemperature_init();
}
}
 

class flowValues extends srValues {
signValues sign;
relativeValues rel;
// relation method
relation conservationOfFlow ( flowValues flowOut1, flowValues flowOut2) {
if (sign = positive)
   ((flowOut1.sign = positive) | (flowOut2.sign = positive));
if (sign = negative)
   ((flowOut1.sign = negative) | (flowOut2.sign = negative));
if (sign = zero) {
   iff (flowOut1.sign = zero) (flowOut2.sign = zero);
   iff (flowOut1.sign = positive) (flowOut2.sign = negative);
   iff (flowOut1.sign = negative) (flowOut2.sign = positive);}
if (rel = high)
   ((flowOut1.rel = high) | (flowOut2.rel = high));
if (rel = low)
   ((flowOut1.rel = low) | (flowOut2.rel = low));
if (rel = nominal) {
    iff (flowOut1.rel = nominal) (flowOut2.rel = nominal);
    if (! flowOut1.oppositeFlow(flowOut2)) {
         iff (flowOut1.rel = low) (flowOut2.rel = high);
         iff (flowOut1.rel = high) (flowOut2.rel = low);}
    if (flowOut1.oppositeFlow(flowOut2)) {
         iff (flowOut1.rel = high) (flowOut2.rel = high);
         iff (flowOut1.rel = low) (flowOut2.rel = low);}};
}
// relation method
relation negateFlow ( flowValues to) {
if (sign = positive)
   to.sign = negative;
if (sign = negative)
   to.sign = positive;
if (sign = zero)
   to.sign = zero;
rel = to.rel;
}
// relation method
relation oppositeFlow ( flowValues to) {
((sign = positive) & (to.sign = negative)) |
((sign = negative) & (to.sign = positive));
}
}
 

class lO2FeedLineFlow {
range bleed;
signValues sign;

// restrictive constaints on arg types
relation lO2FeedLineFlow_init () {
// the bleed range is in the positive flow range
if (bleed.lowerBound = aboveThreshold)
   sign = positive;
if (sign = zero)
   bleed.lowerBound = belowThreshold;
}
{
  lO2FeedLineFlow_init();
}
}
 

class lO2FeedLinePressure {
range bleedRate;
}
 

class lO2FeedLineTemperature {
range lO2;
}
 

class lO2properties {
emptyValues level;
ventLinePressure pressure;
range temperature;
lO2FeedLineFlow flow;
}
 

class liquidLevelValues extends srValues {
signValues sign;
relativeValues rel;
}
 

class mpre107pSetPoints {
range rg21;
range rg02;

// restrictive constaints on arg types
relation mpre107pSetPoints_init () {
// we know at compile time which is bigger: 
// here it's rg21.upperBound >= rg02.lowerBound
// (although this may change)

if (rg21.upperBound = aboveThreshold)
   rg02.lowerBound = aboveThreshold;

if (rg02.lowerBound = belowThreshold)
   rg21.upperBound = belowThreshold;
}
{
  mpre107pSetPoints_init();
}
}
 

class pneumaticsLinePressure {
range rg02;
range rg21;

// restrictive constaints on arg types
relation pneumaticsLinePressure_init () {
// we know at compile time which is bigger: 
// here it's rg21.upperBound <= rg02.lowerBound
// (although this may change)

if (rg21.upperBound = belowThreshold)
   rg02.lowerBound = belowThreshold;

if (rg02.lowerBound = aboveThreshold)
   rg21.upperBound = aboveThreshold;
}
{
  pneumaticsLinePressure_init();
}
// abstraction method
relation getSolenoidActuationThreshold ( thresholdValues to ) {
to = rg21.lowerBound;
}
}
 

class pressureValues extends srValues {
signValues sign;
relativeValues rel;
}
 

class pressurizationLinePressure {
range rg01;
range rg11;

// restrictive constaints on arg types
relation pressurizationLinePressure_init () {
// we know at compile time which is bigger: 
// here it's rg11.upperBound <= rg01.lowerBound
// (although this may change)

if (rg11.upperBound = belowThreshold)
   rg01.lowerBound = belowThreshold;

if (rg01.lowerBound = aboveThreshold)
   rg11.upperBound = aboveThreshold;
}
{
  pressurizationLinePressure_init();
}
}
 

class pressurizationLineTemperature {
range gHe;
range tankMixture;

// restrictive constaints on arg types
relation pressurizationLineTemperature_init () {
// the tank mixture is colder than gHe
if (tankMixture.upperBound = belowThreshold)
   gHe.lowerBound = belowThreshold;

if (gHe.lowerBound = aboveThreshold)
   tankMixture.upperBound = aboveThreshold;
}
{
  pressurizationLineTemperature_init();
}
}
 

class temperatureValues extends srValues {
signValues sign;
relativeValues rel;
}
 

class ventLine {
ventLinePressure pressure;
ventLineTemperature temperature;
signValues flowOut;
// abstraction method
relation getPressure ( ventLinePressure to ) {
to = pressure;
}
// abstraction method
relation getTemperature ( ventLineTemperature to ) {
to = temperature;
}
}
 

class fluidPropertyValues {
pressureValues pressure;
flowValues flow;
}
 

class lO2FeedLine {
lO2FeedLinePressure pressure;
lO2FeedLineTemperature temperature;
lO2FeedLineFlow flow;
// abstraction method
relation getPressure ( lO2FeedLinePressure to ) {
to = pressure;
}
// abstraction method
relation getTemperature ( lO2FeedLineTemperature to ) {
to = temperature;
}
}
 

class pneumaticsLine {
pneumaticsLinePressure pressure;
pneumaticsLineTemperature temperature;
// abstraction method
relation getPressure ( pneumaticsLinePressure to ) {
to = pressure;
}
// abstraction method
relation getSolenoidActuationThreshold ( thresholdValues to ) {
to = pressure.rg21.lowerBound;
}
// abstraction method
relation getTemperature ( pneumaticsLineTemperature to ) {
to = temperature;
}
}
 

class pressurizationLine {
pressurizationLinePressure pressure;
pressurizationLineTemperature temperature;
pressurizationLineContents contents;

// restrictive constaints on arg types
relation pressurizationLine_init () {
// assume that temperature at a location in the line is a function
// of mixture only, so that upper and lower bounds are conservatively
// chosen to reflect all possible pressures.  (we may need to come
// up with tighter bounds that are a function of pressure in the
// future).

if (contents = gHe)
   temperature.gHe.upperBound = belowThreshold &  
   temperature.gHe.lowerBound = aboveThreshold;

if (contents = tankMixture)
   temperature.tankMixture.upperBound = belowThreshold &  
   temperature.tankMixture.lowerBound = aboveThreshold;
}
{
  pressurizationLine_init();
}
// abstraction method
relation getPressure ( pressurizationLinePressure to ) {
to = pressure;
}
// abstraction method
relation getTemperature ( pressurizationLineTemperature to ) {
to = temperature;
}
}
 

class pipe extends fluidPropertyValues {
pressureValues pressure;
flowValues flow;
// abstraction method
relation moreThan ( pipe to ) {
pressure.moreThan(to.pressure) |
flow.moreThan(to.flow);
}
// abstraction method
relation pipePressure ( pressureValues to ) {
pressure = to;
}
// abstraction method
/// MAJOR KLUGE! 
/// include temperature atttribute in pipe?? 
/// this.temperature.equal(to);
relation pipeTemperature ( temperatureValues to ) {
pressure.sign = to.sign;
pressure.rel = to.rel;
}
}
 



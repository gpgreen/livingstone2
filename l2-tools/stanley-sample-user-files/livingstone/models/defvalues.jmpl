// this code is automatically generated by Stanley VJMPL
// DO NOT EDIT

enum cbCmd 
{on, off, reset, noCommand} { 
};
 

enum closedIndicator 
{closed, notClosed} { 
};
 

enum contextValue 
{pneumatics, pressurization, rcs, loxFeed, loxDump, loxEngineInlet, loxTank, loxVent, rp1Feed, rp1Dump, rp1EngineInlet, rp1Tank, rp1Vent} { 
};
 

/// attributes of this type will determine componentmodule color in OPS mode
enum displayStateValues 
{noData, indeterminate, unknownL2Value, ok, failed, high, nominal, low, positive, zero, negative, open, closed, thrusting, quiescent, wet, dry, empty, filling, full, emptying, unknown} { 
};
 

enum emptyValues 
{empty, notEmpty} { 
};
 

enum fuseCmd 
{replace, noCommand} { 
};
 

enum jumperCmd 
{jump, noCommand} { 
};
 

enum onOffCommand 
{on, off, noCommand} { 
};
 

enum onOffState 
{on, off} { 
};
 

enum openCloseCommand 
{open, close, noCommand} { 
};
 

enum openCloseLatchCommand 
{open, close, latch, unlatch, noCommand} { 
};
 

enum openClosedValues 
{open, closed} { 
};
 

enum openIndicator 
{open, notOpen} { 
};
 

enum pressurizationLineContents 
{gHe, tankMixture} { 
};
 

enum pressurizationLineMixture 
{gHe, gHegO2} { 
};
 

/// Parameters of type RELATIVE-VALUES can be either LOW,
/// NOMINAL, or HIGH.  These describe the sign of deviations
/// from nominal behavior (that is [x]_r is isomorphic (=i)
/// to [x-x_n]_s, where x_n is nominal x).  They are used
/// during diagnosis to qualitatively describe symptomatic
/// values.  We use the notation [e]_r to denote the relative
/// value of real expression e.
enum relativeValues 
{low, nominal, high} { 
// relation method
/// (and (not (r-equal ?from ?to ))
///        (or (and (low ?from )
/// 		(or (nominal ?to ) (high ?to )))
/// 	   (and (nominal ?from )
/// 		(high ?to ))
/// 	   ))
relation relativeValuesLessThan ( relativeValues to) {
((this = low) & ((to = nominal) | (to = high))) |
 ((this = nominal) & (to = high));
}
// relation method
/// (and (not (r-equal ?from ?to ))
///        (or (and (high ?from )
/// 		(or (nominal ?to ) (low ?to )))
/// 	   (and (nominal ?from )
/// 		(low ?to ))
/// 	   ))
relation relativeValuesMoreThan ( relativeValues to) {
((this = high) & ((to = nominal) | (to =low))) |
      ((this = nominal) & (to = low));
}
// relation method
relation relativeValuesMoreThanZero ( ) {
((this = high) | (this = nominal) | (this =low));
}
};
 

/// Parameters of type SIGN-VALUES can be either POSITIVE, 
/// NEGATIVE, or ZERO.  This is the domain of a sign algebra.
/// In sign algebra the sign of a real expression e is denoted
/// by [e]. Signs are typically used to describe the
/// derivatives of continuous parameters, directions of
/// flow...
/// 
/// Note: We do not explicitly include the qualitative value
/// "?".  This in part is because defvalues presumes that the
/// elements of the domain are mutually exclusive and
/// collectively exhaustive.
/// 
/// Says that a sign must be exactly one of positive, negative
/// or zero.
enum signValues 
{positive, zero, negative} { 
// relation method
relation signValuesLessThan ( signValues to) {
(((this = negative) & ((to = zero) | (to = positive))) |
  ((this = zero) & (to = positive)));
}
// relation method
relation signValuesMoreThan ( signValues to) {
(((this = positive) & ((to = zero) | (to = negative))) |
 ((this = zero) & (to = negative)));
}
// relation method
relation signValuesMoreThanZero ( ) {
this = positive;
}
};
 

enum thresholdValues 
{aboveThreshold, belowThreshold} { 
};
 



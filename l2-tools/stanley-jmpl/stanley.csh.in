#!/bin/csh -f
# -f Fast start. do not read the  .cshrc  file

# $Id: stanley.csh.in,v 1.2 2006/04/29 00:47:38 taylor Exp $
####
#### See the file "l2-tools/disclaimers-and-notices.txt" for 
#### information on usage and redistribution of this file, 
#### and for a DISCLAIMER OF ALL WARRANTIES.
####

## set location dependent env vars
## created by stanley.csh.in by configure

set validOption = 1
set arg_reset = 0

foreach arg ($*)
  if ("$arg" == "-reset") then
    set arg_reset = 1
  else
    echo "$arg is an invalid option! -- OPTIONS : -reset"
    set validOption = 0
  endif
end
if ($validOption == 0) then
  exit
endif

if ($arg_reset == 1) then
  unsetenv STANLEY_ROOT
  # path can become too long => "Word too long."
  if (-f ~/.cshrc) then
    source ~/.cshrc
  endif
  if (-f ~/.login) then
    source ~/.login -reset
  endif
endif

if (! -f stanley.csh ) then
  # needed for setting STANLEY_ROOT
  echo "stanley.csh: current directory is not <root>"
  exit
endif

## check that inherited STANLEY_ROOT is correctly set
if (${?STANLEY_ROOT}) then
  if (! -f $STANLEY_ROOT/stanley.csh ) then
    echo stanley.csh: STANLEY_ROOT was $STANLEY_ROOT
    unsetenv STANLEY_ROOT
  endif
endif

if (! ${?STANLEY_ROOT}) then
  # only set these vars once -- since this is called by
  # RUN-STANLEY-VJMPL.csh & RUN-STANLEY-OPS.csh

    # using @...@ tokene relies on configure being run on local platform
    # in order to distribute a pre-built system, these setenv vars
    # must be dynamically determined here
    # setenv STANLEY_ROOT @STANLEY_ROOT@
    # setenv LIVINGSTONE_ROOT @LIVINGSTONE_ROOT@
    # setenv L2TOOLS_ROOT @L2TOOLS_ROOT@
    # setenv SUPPORT_ROOT @SUPPORT_ROOT@

    set base = `pwd`
    set u1 = `dirname $base`
    set u2 = `dirname $u1`
    setenv STANLEY_ROOT $base
    setenv LIVINGSTONE_ROOT $u2/mba
    setenv L2TOOLS_ROOT $u2/l2-tools
    setenv SUPPORT_ROOT $u2/support

    echo stanley.csh: STANLEY_ROOT set to $STANLEY_ROOT 
    echo stanley.csh: set LIVINGSTONE_ROOT to $LIVINGSTONE_ROOT
    echo stanley.csh: set L2TOOLS_ROOT to $L2TOOLS_ROOT 
    echo stanley.csh: SUPPORT_ROOT set to $SUPPORT_ROOT 

    setenv OSTYPE @OSTYPE@
    setenv PS_CMD @PS_CMD@
    # gcc 2.95.2
    setenv CC @CC@

    # for Tcl/Tk
    setenv GENERIC_LIBS @GENERIC_LIBS@
    setenv STANLEY_TCL_L @STANLEY_TCL_L@
    setenv STANLEY_TK_L @STANLEY_TK_L@
    setenv STANLEY_ITCL_L @STANLEY_ITCL_L@
    setenv STANLEY_TKTABLE_L @STANLEY_TKTABLE_L@

    setenv TCL_LIBRARY $STANLEY_ROOT/support/tclTk@STANLEY_TCL_TK_VERSION@/lib/tcl@STANLEY_TCL_TK_VERSION@
    setenv TK_LIBRARY $STANLEY_ROOT/support/tclTk@STANLEY_TCL_TK_VERSION@/lib/tk@STANLEY_TCL_TK_VERSION@
    setenv STANLEY_TCL_TK_INC $STANLEY_ROOT/support/tclTk@STANLEY_TCL_TK_VERSION@/include
    setenv STANLEY_TCL_TK_LIB $STANLEY_ROOT/support/tclTk@STANLEY_TCL_TK_VERSION@/lib
    setenv STANLEY_TCL_SRC $SUPPORT_ROOT/stanley-support-src/tclTk@STANLEY_TCL_TK_VERSION@/tcl@STANLEY_TCL_VERSION@
    setenv STANLEY_TK_SRC $SUPPORT_ROOT/stanley-support-src/tclTk@STANLEY_TCL_TK_VERSION@/tk@STANLEY_TK_VERSION@
    setenv STANLEY_TKTABLE_LIB $STANLEY_ROOT/support/tclTk@STANLEY_TCL_TK_VERSION@/lib/Tktable@STANLEY_TKTABLE_VERSION@
    setenv STANLEY_TKTABLE_SRC $SUPPORT_ROOT/stanley-support-src/tclTk@STANLEY_TCL_TK_VERSION@/Tktable@STANLEY_TKTABLE_VERSION@/src

    # CORBA
    setenv CORBA_DIR $STANLEY_ROOT/interface/livingstone/corba
    # CPP define token - used in stanley/src/tkAppInit.c
    setenv STANLEY_CORBA_P @STANLEY_CORBA_P@
    setenv MICO_LIB $STANLEY_ROOT/support/mico/@STANLEY_MICO_VERSION@/mico/lib
    setenv MICO_LIB_L @MICO_LIB_L@
    setenv TCL_MICO_LIB $STANLEY_ROOT/support/combat-@STANLEY_COMBAT_VERSION@/lib
    setenv TCL_MICO_LIB_L combat
    setenv TCL_MICO_BIN $STANLEY_ROOT/support/combat-@STANLEY_COMBAT_VERSION@/bin
    setenv OTHER_MICO_LIBS "@OTHER_MICO_LIBS@"
    setenv CPP_LIB @CPP_LIB@
    # for idl2tcl's invocation of ird; and tclmicosh
    set path = ($MICO_LIB/../bin $TCL_MICO_BIN $path)
    # jre/lib/rt.jar not needed in CLASSPATH
#     if (! $?CLASSPATH) then
#         setenv CLASSPATH @JAVA_HOME@/jre/lib/rt.jar
#     else
#       # if CLASSPATH not in list, add it
#       if ($CLASSPATH !~ *jdk1.2.2*) then
#         setenv CLASSPATH @JAVA_HOME@/jre/lib/rt.jar:${CLASSPATH}
#       endif
#     endif

    # instead of using $JAVA_HOME from configure, determine it again
    # for pre-built distribution to run without needing changes to $JAVA_HOME
    # on another system
    if (${?JAVA_HOME}) then
      rm -f config.jv
      # must be done in sh, since java is an sh script
      sh -c "$JAVA_HOME/bin/java -version 2> config.jv"
      set java_version = `cat config.jv`
      # echo java_version W $java_version
      # java version "1.3.0_02"
      set version_2 = `echo $java_version | awk -F\" '{print $2}'`
      # echo version_2 $version_2
      set match_test4 = `expr match $version_2 '.*1\.4\.*'`
      set match_test5 = `expr match $version_2 '.*1\.5\.*'`
      set match_test6 = `expr match $version_2 '.*1\.6\.*'`
      set match_test7 = `expr match $version_2 '.*1\.7\.*'`
      set match_test8 = `expr match $version_2 '.*1\.8\.*'`
      # echo match_test $match_test 
      if (( $match_test4 == 0 ) && ( $match_test5 == 0 ) && ( $match_test6 == 0 ) && ( $match_test7 == 0 ) && ( $match_test8 == 0)) then
        echo "$JAVA_HOME not jdk1.4.*, jdk1.5.*, jdk1.6.*, jdk1.7.*, jdk1.8.*"
        exit 1
      endif
    else
      echo "JAVA_HOME not set"
      exit 1
    endif
    setenv JAVA_BIN $JAVA_HOME/bin
    setenv THREADS_FLAG native

    # Change X11 includes and libraries from /usr/local/X.V11R5 => /usr/openwin
    # since Sparc Ultra has hardware dependency on openwin libraries 
    setenv X11_LIB_DIR @X11_LIB_DIR@
    setenv X11_INC_DIR @X11_INC_DIR@

    # ensure that LD_LIBRARY_PATH exists
    if (! $?LD_LIBRARY_PATH) then
      setenv LD_LIBRARY_PATH @GENERIC_LIBS@
    endif	


    # tcl/tk finds its required shared libs for loading from LD_LIBRARY_PATH
    # when it is built with shared libs

    # if $STANLEY_TCL_TK_LIB not in list, add it
    # add it in front of list so that it is the preferred location
    if ($LD_LIBRARY_PATH !~ *${STANLEY_TCL_TK_LIB}) then
      setenv LD_LIBRARY_PATH ${STANLEY_TCL_TK_LIB}:${LD_LIBRARY_PATH}
    endif

    setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:$STANLEY_TKTABLE_LIB

    # Stanley ORB client: Mico shared libraries
    # setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:$MICO_LIB
    # setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:$TCL_MICO_LIB
    # to prevent:
    # uncaught MICO exception: IDL:omg.org/CORBA/MARSHAL:1.0 (0, not-completed)
    # Abort
    # put mico, tclmico at *beginning* of LD_LIBRARY_PATH 
    # also make sure that /usr/openwin/lib preceeds /opt/local/X.V11R5/lib in users lib path
    setenv LD_LIBRARY_PATH ${MICO_LIB}:${TCL_MICO_LIB}:${X11_LIB_DIR}:${LD_LIBRARY_PATH}

    ## this is needed to resolve __builtin_new in libmico
    # if $CPP_LIB not in list, add it
    if ($LD_LIBRARY_PATH !~ *${CPP_LIB}*) then
      setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${CPP_LIB}
    endif


    ## Livingstone shared libraries for L2Tools JNI wrapper
    ## put at head of path so it is preferred over other libs which
    ## may have liblivdll.so in them
    setenv LD_LIBRARY_PATH $LIVINGSTONE_ROOT/cpp/lib:${LD_LIBRARY_PATH}
    ## with autoconfig L2 build, liblivdll & libxerces are in mba/cpp/lib
#     if ($OSTYPE == "solaris") then
#       setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:$SUPPORT_ROOT/xml4c3_1_0-SolCC/lib
#       ## for testing -solaris
#       # setenv LD_LIBRARY_PATH /home/kronos/id3/stephen/mba/cpp/src/livdll:${LD_LIBRARY_PATH}
#     else if ($OSTYPE == "linux") then
#       setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:$SUPPORT_ROOT/xml4c3_1_0-linux/lib
#     endif

    ## Java class path for L2 Tools
    setenv CLASSPATH $L2TOOLS_ROOT/jars/l2Tools.jar
    # testing - solaris or linux
    # setenv CLASSPATH $L2TOOLS_ROOT/java/src

    ## for Lint, and Compiler
    # the compiler source is now in java/src and it is jarred into l2Tools.jar
    # the 3rd party libraries are added
    setenv CLASSPATH ${CLASSPATH}:$L2TOOLS_ROOT/java/lib/aelfred.jar:$L2TOOLS_ROOT/java/lib/antlr.jar:$L2TOOLS_ROOT/java/lib/domlight-1.0.jar:$L2TOOLS_ROOT/java/lib/sax.jar:$L2TOOLS_ROOT/java/lib/openjgraph.jar

    ## for other L2 tools
    setenv CLASSPATH ${CLASSPATH}:$L2TOOLS_ROOT/jars/browser.jar

endif










